{"version":3,"sources":["Calculator.js","ValueList.js","App.js","serviceWorker.js","index.js"],"names":["Calculator","handleDeposit","e","props","onDeposit","target","value","handleRent","onRent","this","deposit","rent","className","type","step","onChange","placeholder","Component","ValueList","addComma","num","toString","replace","Math","floor","Number","propsTypes","PropTypes","number","App","state","setState","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sQAwBeA,G,iNArBXC,cAAgB,SAAAC,GACZ,EAAKC,MAAMC,UAAUF,EAAEG,OAAOC,Q,EAGlCC,WAAa,SAAAL,GACT,EAAKC,MAAMK,OAAON,EAAEG,OAAOC,Q,wEAGrB,IAAD,EACoBG,KAAKN,MAAvBO,EADF,EACEA,QAAUC,EADZ,EACYA,KACjB,OACI,yBAAKC,UAAU,kBACf,kDACA,2BAAOC,KAAK,SAASC,KAAK,IAAIR,MAAOI,EAASK,SAAUN,KAAKR,cAAee,YAAY,kEACxF,kDACA,2BAAOH,KAAK,SAASP,MAAOK,EAAMI,SAAUN,KAAKF,WAAYS,YAAY,uE,GAhB5DC,c,gBCCnBC,EAAY,SAAC,GAAuB,IAArBR,EAAoB,EAApBA,QAASC,EAAW,EAAXA,KAE1B,SAASQ,EAASC,GAEd,OAAOA,EAAIC,WAAWC,QADT,wBACyB,KAG1C,OACI,wBAAIV,UAAU,mBACV,0GACA,4BAAKO,EAASI,KAAKC,MAAa,GAAPb,KACzB,0HACA,4BAAKQ,EAA2C,IAAlCI,KAAKC,MAAc,GAAPb,EAAc,OACxC,6GACA,4BAAKQ,EAASR,EAAyC,IAAlCY,KAAKC,MAAc,GAAPb,EAAc,OAC/C,4LACA,4BAAKQ,EAA0C,IAAhCI,KAAKC,MAAc,GAAPb,EAAc,KAAc,IAAO,MAC9D,+FACA,4BAAKQ,EAA2C,IAAhCI,KAAKC,MAAc,GAAPb,EAAc,KAAc,IAAO,IAASc,OAAOf,KAC/E,wBAAIE,UAAU,mBAAd,6KAGA,4BAAKO,EAAST,EAAU,KACxB,2KACA,4BAAKS,EAA2C,IAAhCI,KAAKC,MAAc,GAAPb,EAAc,KAAc,IAAO,IAASc,OAAOf,GAASA,EAAQ,OAK5GQ,EAAUQ,WAAa,CACnBhB,QAASiB,IAAUC,OACnBjB,KAAMgB,IAAUC,QAGLV,QCKAW,E,2MAnCbC,MAAO,CACLpB,QAAU,EACVC,KAAO,G,EAGTV,cAAgB,SAAAS,GACd,EAAKqB,SAAS,CACZrB,QAAUA,K,EAIdH,WAAa,SAAAI,GACX,EAAKoB,SAAS,CACZpB,KAAOA,K,wEAID,IAAD,EACkBF,KAAKqB,MAAvBpB,EADA,EACAA,QAASC,EADT,EACSA,KAChB,OACE,yBAAKC,UAAU,OACf,4BAAQA,UAAU,UACd,gGAEJ,wBAAIA,UAAU,UAAd,0FACA,yBAAKA,UAAU,WACX,kBAAC,EAAD,CAAYF,QAASA,EAASC,KAAMA,EAAMP,UAAWK,KAAKR,cAAeO,OAAQC,KAAKF,aACtF,kBAAC,EAAD,CAAWG,QAASA,EAASC,KAAMA,KAEvC,wBAAIC,UAAU,UAAd,6E,GA9BYK,aCMEe,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.03b3c114.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass Calculator extends Component {\r\n    handleDeposit = e => {\r\n        this.props.onDeposit(e.target.value)\r\n    }\r\n\r\n    handleRent = e => {\r\n        this.props.onRent(e.target.value)\r\n    }\r\n\r\n    render() {\r\n        const {deposit,  rent} = this.props;\r\n        return (\r\n            <div className=\"content__input\">\r\n            <h3>보증금</h3>\r\n            <input type=\"number\" step=\"0\" value={deposit} onChange={this.handleDeposit} placeholder=\"보증금을 입력해주세요\" />\r\n            <h3>임대료</h3>\r\n            <input type=\"number\" value={rent} onChange={this.handleRent} placeholder=\"임대료를 입력해주세요\" />\r\n        </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Calculator;","/* eslint-disable no-useless-concat */\r\nimport React from \"react\";\r\nimport PropTypes from 'prop-types';\r\nconst ValueList = ({ deposit, rent }) => {\r\n\r\n    function addComma(num) {\r\n        var regexp = /\\B(?=(\\d{3})+(?!\\d))/g;\r\n        return num.toString().replace(regexp, ',');\r\n      }\r\n\r\n    return (\r\n        <ul className=\"content__values\">\r\n            <li>전환 가능 임대료(임대료의 60%)</li>\r\n            <li>{addComma(Math.floor(rent * 0.6))}</li>\r\n            <li>전환 가능 최종 임대료(5,000원 단위로) </li>\r\n            <li>{addComma(Math.floor((rent * 0.6) / 5000) * 5000)}</li>\r\n            <li>최대 보증금 전환시 월 임대료 </li>\r\n            <li>{addComma(rent - Math.floor((rent * 0.6) / 5000) * 5000)}</li>\r\n            <li>전환 가능 보증금(1,000,000원 단위로만 가능, 임대료 5천원당 100만원) </li>\r\n            <li>{addComma((Math.floor((rent * 0.6) / 5000)*5000) / 5000 * 1000000)}</li>\r\n            <li>최대 전환시 최종 보증금</li>\r\n            <li>{addComma(((Math.floor((rent * 0.6) / 5000)*5000) / 5000 * 1000000)+Number(deposit))}</li>\r\n            <li className=\"content__result\">\r\n                전환 가능 임대료(임대료의 60%)계약시 보증금 얼마를 마련해야 하지?\r\n            </li>\r\n            <li>{addComma(deposit / 10)}</li>\r\n            <li>계약 이후 최대전환시 보증금 얼마를 추가로 내야할까?</li>\r\n            <li>{addComma(((Math.floor((rent * 0.6) / 5000)*5000) / 5000 * 1000000)+Number(deposit)-deposit/10)}</li>\r\n        </ul>\r\n    );\r\n};\r\n\r\nValueList.propsTypes = {\r\n    deposit: PropTypes.number,\r\n    rent: PropTypes.number\r\n};\r\n\r\nexport default ValueList;\r\n","import React, { Component } from 'react';\nimport \"./App.css\";\nimport Calculator from \"./Calculator\";\nimport ValueList from \"./ValueList\";\n\n\nclass App extends Component {\n  state ={\n    deposit : 0,\n    rent : 0\n  }\n\n  handleDeposit = deposit => {\n    this.setState({\n      deposit : deposit\n    })\n  }\n\n  handleRent = rent => {\n    this.setState({\n      rent : rent\n    })\n  }\n\n  render() {\n    const {deposit, rent } = this.state;\n    return (\n      <div className=\"App\">\n      <header className=\"header\">\n          <h1>최대 보증금 전환 계산기</h1>\n      </header>\n      <h1 className=\"notice\">!!!!!!!! 참고용으로 만든것입니다 !!!!!!!! </h1>\n      <div className=\"content\">\n          <Calculator deposit={deposit} rent={rent} onDeposit={this.handleDeposit} onRent={this.handleRent} />\n          <ValueList deposit={deposit} rent={rent} />\n      </div>\n      <h1 className=\"notice\">참고용으로 만든것입니다.</h1>\n  </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './reset.css'\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}